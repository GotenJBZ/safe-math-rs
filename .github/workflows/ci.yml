name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  yaml-check:
    name: Check YAML formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Install prettier
        run: npm install -g prettier
      - name: Check YAML formatting
        run: prettier --check '**/*.{yaml,yml}'

  rust-quality:
    name: Rust formatting, lint, deps, README
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Cache cargo registry + build
        uses: Swatinem/rust-cache@v2
      - name: Check version consistency
        run: ./scripts/check_versions.sh
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Lint with xclippy (strict)
        run: cargo xclippy
      - name: Install cargo-machete
        run: cargo install cargo-machete
      - name: Check for unused dependencies
        run: cargo machete --skip-target-dir
      - name: Install cargo-readme
        run: cargo install cargo-readme
      - name: Check README.md is up to date
        run: |
          cargo readme --no-license > /tmp/README.md
          diff -q /tmp/README.md README.md
        shell: bash

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [lint, format]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo registry + build
        uses: Swatinem/rust-cache@v2
      - name: Check examples compilation
        run: cargo check --examples
      - name: Run tests
        run: cargo test --workspace --all-targets --all-features --quiet
